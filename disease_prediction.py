# -*- coding: utf-8 -*-
"""Disease Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iJdNBUhE-ekRLXP2fp1icI1C4KLLuWII
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("itachi9604/disease-symptom-description-dataset")

print("Path to dataset files:", path)

# Step 1: Import libraries
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Step 2: Load datasets
df = pd.read_csv('/content/sample_data/dataset.csv')
severity = pd.read_csv('/content/sample_data/Symptom-severity.csv')
description = pd.read_csv('/content/sample_data/symptom_Description.csv')
precaution = pd.read_csv('/content/sample_data/symptom_precaution.csv')

# Step 3: Preprocess data
df.fillna('None', inplace=True)
symptom_weight = dict(zip(severity['Symptom'].str.strip().str.lower(), severity['weight']))

# Convert symptoms to weights
for col in df.columns[1:]:
    df[col] = df[col].apply(lambda x: symptom_weight.get(str(x).strip().lower(), 0) if isinstance(x, str) else 0)

# Encode disease labels
le = LabelEncoder()
df['Disease'] = le.fit_transform(df['Disease'])

# Step 4: Train model
X = df.drop('Disease', axis=1)
y = df['Disease']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

# Accuracy display
accuracy = accuracy_score(y_test, model.predict(X_test))
print("‚úÖ Model Trained Successfully. Accuracy:", round(accuracy * 100, 2), "%")

# Step 5: Prediction Function
def predict_disease(symptoms_list):
    input_data = [0] * 17
    for i in range(min(len(symptoms_list), 17)):
        s = symptoms_list[i].strip().lower()
        input_data[i] = symptom_weight.get(s, 0)

    probs = model.predict_proba([input_data])[0]
    top3 = probs.argsort()[-3:][::-1]
    results = []

    for i in top3:
        disease = le.inverse_transform([i])[0]
        prob = round(probs[i] * 100, 2)

        desc_row = description[description['Disease'] == disease]
        desc = desc_row['Description'].values[0] if not desc_row.empty else 'No description available.'

        prec_row = precaution[precaution['Disease'] == disease]
        if not prec_row.empty:
            prec = prec_row.iloc[0][['Precaution_1', 'Precaution_2', 'Precaution_3', 'Precaution_4']].tolist()
        else:
            prec = ['No precaution info available.']

        results.append((disease, prob, desc, prec))

    return results

# Step 6: Symptom Menu Setup
all_symptoms = sorted(severity['Symptom'].str.strip().str.lower().unique())
symptom_dict = {i + 1: s for i, s in enumerate(all_symptoms)}

def show_symptom_menu():
    print("\nüîç Available Symptoms:")
    for i in range(1, len(symptom_dict) + 1):
        print("{}: {}".format(i, symptom_dict[i]))

# Step 7: Menu-Driven System
while True:
    print("\n===== Disease Prediction System =====")
    print("1. Predict Disease")
    print("2. Exit")
    choice = input("Enter your choice (1/2): ")

    if choice == '1':
        show_symptom_menu()
        selected = input("\nEnter symptom numbers separated by commas (e.g., 46, 95): ")

        try:
            nums = [int(n.strip()) for n in selected.split(",") if n.strip().isdigit()]
            user_symptoms = [symptom_dict[n] for n in nums if n in symptom_dict]
        except:
            print("‚ùå Invalid input. Try again.")
            continue

        if not user_symptoms:
            print("‚ùå No valid symptoms selected.")
            continue

        print("\n‚úÖ You selected:")
        for n in nums:
            if n in symptom_dict:
                print("- {}: {}".format(n, symptom_dict[n]))

        results = predict_disease(user_symptoms)

        print("\nüîÆ Top Predicted Diseases:")
        for idx, (disease, prob, desc, precs) in enumerate(results, 1):
            print("\n{}. üìå {} ({:.2f}%)".format(idx, disease, prob))
            print("üìñ Description:", desc)
            print("üõ°Ô∏è Precautions:")
            for p in precs:
                print("-", p)

    elif choice == '2':
        print("üëã Exiting the system. Stay healthy!")
        break
    else:
        print("‚ùå Invalid choice. Please select 1 or 2.")

# Optional: print accuracy
accuracy = accuracy_score(y_test, model.predict(X_test))
print("‚úÖ Model Trained Successfully. Accuracy:", round(accuracy * 100, 2), "%")